.\" ident	@(#)Array_alg:man/for_each.3	3.2
.\"
.\" C++ Standard Components, Release 3.0.
.\"
.\" Copyright (c) 1991, 1992 AT&T and UNIX System Laboratories, Inc.
.\" Copyright (c) 1988, 1989, 1990 AT&T.  All Rights Reserved.
.\"
.\" THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T and UNIX System
.\" Laboratories, Inc.  The copyright notice above does not evidence
.\" any actual or intended publication of such source code.
.\" 
.TH \f3for_each\fP \f3Array_alg(3C++)\fP " "
.SH NAME
for_each \- apply a given function to every location in an array
.SH SYNOPSIS OF Array_alg.h
.Bf

    template <class \*(gt>
    void for_each(void (*fun)(\*(gt*),\*(gt* b,\*(gt* e);

.Be
.SH ASSUMPTIONS
None.
.SH DESCRIPTION
.PP
Applies \f4fun\f1 to every location 
in the array from the leftmost to the rightmost.
.SH COMPLEXITY
.PP
If \f2N\f1 is the size of the array,
then complexity is \f2O(N)\f1.
Exactly \f2N\f1 calls to \f4fun\f1 are made.
.SH NOTES
Because a Block (see \f3Block(3C++)\f1)
can always be used wherever an array is called for,
Array Algorithms can also be used with Blocks.
In fact, these two components were actually designed 
to be used together.
.SH SEE ALSO
.Bf
\f3intro(.)\f1
\f3fill(.)\f1
\f3generate(.)\f1
\f3subs(.)\f1
\f3Block(3C++)\f1
.Be
