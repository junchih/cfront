.\" ident	@(#)Regex:man/Regex.3	3.2
.\"
.\" C++ Standard Components, Release 3.0.
.\"
.\" Copyright (c) 1991, 1992 AT&T and UNIX System Laboratories, Inc.
.\" Copyright (c) 1988, 1989, 1990 AT&T.  All Rights Reserved.
.\"
.\" THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T and UNIX System
.\" Laboratories, Inc.  The copyright notice above does not evidence
.\" any actual or intended publication of such source code.
.\" 
.de O
.ft 2
O(\\$1)
..
.TH "\f3Regex\f1" "\f33C++\f1"
.SH NAME
Regex \- Regular expressions
.SH "SYNOPSIS of Regex.h"
.Bf
#include <String.h>

class Substrinfo {
public:
    int i;
    size_t len;
    operator void*();
    int operator!();
};

class Subex;  // \f2see below\fP

class Regex {
public:

//  Enumerations

    enum sensitivity { case_sensitive, case_insensitive };
    enum { max_num_subexes = 10 };

//  Constructor

    Regex(const String &pattern,
        sensitivity s = case_sensitive);

//  Copy and assign

    Regex(const Regex & r);
    Regex & operator=(const Regex & r);
    void assign(const String &pattern,
        sensitivity s = case_sensitive);

//  Checking pattern validity

    operator void*() const;
    int operator!() const;
    String the_error() const;

//  Pattern matching    

    Substrinfo match(const char *target) const;
    Substrinfo match(const char *target,
        String &the_substr) const;
    Substrinfo match(const char *target, Subex &) const;
    Substrinfo match(const char *target, Subex &,
        String &the_substr) const;

//  Pattern subexpressions

    Substrinfo subex(unsigned int i) const;
    Substrinfo subex(unsigned int i,
        String &the_subex) const;

//  Relations

    \f2friend\fP int operator==(const Regex &, const Regex &);
    \f2friend\fP int operator!=(const Regex &, const Regex &);

//  Miscellaneous

    String the_pattern() const; 
    sensitivity the_sensitivity() const;
    void set_sensitivity(sensitivity);

//  Regex constants

    static Regex Int, Float, Double,
        Alpha, Alphanum, Identifier;
};        

class Subex {
public:
//  Constructors, destructor

    Subex();
    ~Subex();

//  Subexpression information

    Substrinfo operator()(unsigned int i) const;
    Substrinfo operator()(unsigned int i,
        String &the_substr) const;

//  Miscellaneous

    const char *the_target() const;
};

class Regexiter {
public:

//  Enumerations

    enum style { overlapping, nonoverlapping };

//     Constructors

    Regexiter(const Regex &, const char *target,
        style = nonoverlapping);
    
//  Iterating

    Substrinfo next();
    Substrinfo next(Subex &);
    Substrinfo next(String &the_substr);
    Substrinfo next(Subex &, String &the_substr);

//  Miscellaneous

    const char *the_target();
    const Regex &the_regex();
    style the_style();
};
.Be
.SH DESCRIPTION
Regex provides the C++ programmer with a consistent and slightly enhanced
interface to the Section 3 regular expression compilation and matching routines
(see 
\f3re(3)\f1, 
\f3regcmp(3)\f1,
\f3regex(3)\f1, or
\f3regexp(3)\f1,
depending on your machine).
Regardless of machine, Regex uses its own regular expression 
compilation and matching routines,
rather than relying on whatever routines may or may not happen to 
exist in the Section 3 library of your machine.
.PP
Regular expressions are as in \f3egrep(1)\f1, with the following exceptions:
newlines are treated as ordinary characters,
.B $
matches the null character, and
\\[0-9] subexpression references are allowed.
.PP
The Regex constructor automatically ``compiles'' the regular
expression into an efficient internal form for matching.
Member functions can be used to check the validity of the supplied 
pattern, and if desired, change the pattern.
.PP
Regexes can be matched against target strings;
as in \f3egrep(1)\f1,
a match is 
.I successful 
if the pattern is valid
and the target contains a
.I matching substring
\(em that is, a substring (possibly the null string, or the entire string itself)
which exactly matches the pattern.  
Successful matches return the position and length of the leftmost matching substring
(in the case of iterators, the leftmost matching substring following the previous matching
substring).
Successful matches also optionally return a Subex object, which can
be used to pick out the substrings of the matching substring which matched 
the various pattern subexpressions.
Finally, the user can pick out the subexpressions of the pattern itself.
.PP
In the following, the 
.I i'th subexpression 
in a regular expression is the subexpression grouped by the i'th
left parenthesis, where parentheses are counted from 1 starting at the left of the pattern.
For example, in 
.BR a(b(c))(d) , 
the first, second and third subexpressions are
.BR (b(c)) ,
.BR (c) ,
and
.BR (d) ,
respectively.
The 0'th subexpression is taken to be the entire regular expression.
.sp
.SH "Substrinfo"
Locates substrings within a larger string.
Functions which return a Substrinfo can be considered
to return three values: a boolean, an index, and a length.
The boolean is true if the desired substring was found,
in which case the index and length are set to the appropriate values.
If the caller needs only the boolean, then the return value of
the function can be tested directly without first assigning to a Substrinfo.
.IP "\f4int i;\f1"
The starting index of the substring.
For example, the starting index of ``bar'' in ``foobar'' is 3.
Set to \-1 if the substring was not found.
.IP "\f4size_t len;\f1"
The length of the substring.
Set to 0 if the substring was not found.
.IP "\f4operator void*();\f1"
.SQ
.IP "\f4int operator!();\f1"
Returns non-zero and zero, respectively, if the substring was present.
.SH "Regex"
.SS "Enumerations"
.IP "\f4enum sensitivity { case_sensitive, case_insensitive };\f1"
Used to specify whether matching is to be case sensitive or case insensitive.
Under case insensitive matching, alphabetic characters are considered to match either their
lower or upper case forms; under case sensitive matching, all characters
must match exactly.  
.IP "\f4enum { max_num_subexes = 10 };\f1"
Maximum number of parenthesized subexpressions allowed in a pattern.
Regexes whose patterns exceed this value are invalid.
.ne 5
.SS "Constructors"
.IP "\f4Regex(const String &pattern,\f1"
.IC "\f4    sensitivity s = case_sensitive);\f1"
Constructs the regular expression from the given \f4pattern\f1.
Notice that backslashes in the \f4pattern\f1 must be escaped to 
get past the C++ lexer.
For example, the egrep pattern
\f4^(\e+|-)?\e.[0-9]+$\f1
must be constructed as \f4Regex("^(\e\e+|-)?\e\e.[0-9]+$")\f1,
and 
\f4\e\e\f1 (the pattern representing a literal backslash)
must be constructed as 
\f4Regex("\e\e\e\e")\f1.
If \f4s\f1 is \f4case_insensitive\f1,
then pattern matching (see \f4match\f1)
against this Regex will ignore case.
.sp
WARNING: 
When used with character class ranges (e.g., [a-z], [0-9]), case
insensitivity is applied only 
.I after
range expansion.  For example,
the (rather unusual)
range ``[A-c]'' is always first expanded 
into the character class { A, B, ..., Y, Z, [, \, ], ^, _, `, a, b, c } 
(using the ASCII collating sequence).
Under case sensitive matching this matches any character in the shown set,
while under case insensitive matching this matches any character in the set
{ A, a, B, b, ..., Y, y, Z, z, [, \, ], ^, ` }.
Similarly, the (rather unusual) range ``[a-Z]''
is always first expanded into the empty character class
(using the ASCII collating sequence).
This matches no characters under both case sensitive and case insensitive
matching.
.SS "Copy and assign"
.IP "\f4Regex(const Regex & r);\f1"
.SQ
.IP "\f4Regex & operator=(const Regex & r);\f1"
Copy constructor and
assignment operator.
.IP "\f4void assign(const String &pat,\f1"
.IC "\f4    sensitivity s = case_sensitive)\f1"
Equivalent to, but faster than, assigning \f4Regex(pat, s)\f1 to this Regex.
.SS "Checking pattern validity"
.IP "\f4operator void*() const;\f1"
.SQ
.IP "\f4int operator!() const;\f1"
Return non-zero and zero, respectively, if the pattern is valid.
.IP "\f4String the_error() const;\f1"
If the pattern is invalid, returns a String describing the reason why,
otherwise returns the null String.
.SS "Pattern matching"
.IP "\f4Substrinfo match(const char *target) const;\f1"
.SQ
.IP "\f4Substrinfo match(const char *target,\f1"
.IC "\f4    String &the_substr) const;\f1"
.SQ
.IP "\f4Substrinfo match(const char *target,\f1"
.IC "\f4    Subex &subex) const;\f1"
.SQ
.IP "\f4Substrinfo match(const char *target, Subex &subex,\f1"
.IC "\f4    String &the_substr) const;\f1"
Matches this Regex against the given target.
If the match is successful, 
then assigns \f4the_substr\f1 (if supplied) the matching substring,
assigns \f4subex\f1 (if supplied) an appropriate Subex, and the return value tests true; 
otherwise the return value tests false and the arguments are not affected.
.SS "Pattern subexpressions"
.IP "\f4Substrinfo subex(unsigned int i) const;\f1"
.SQ
.IP "\f4Substrinfo subex(unsigned int i,\f1"
.IC "\f4    String &the_subex) const;\f1"
Picks out the \f4i\f1'th subexpression of the pattern.
If the pattern has an \f4i\f1'th subexpression, then assigns it to 
\f4the_subex\f1 (if supplied) and the return value tests true;
otherwise the return value tests false and the arguments are not affected.
.SS "Relations"
.IP "\f4\f2friend\fP int operator==(const Regex & r, const Regex & s);\f1"
.SQ
.IP "\f4\f2friend\fP int operator!=(const Regex & r, const Regex & s);\f1"
Equality and inequality.  
Regexes \f4r\f1 and \f4s\f1 are considered equal if and only if
\f4r.the_pattern() == s.the_pattern()\f1 and \f4r.the_sensitivity() == s.the_sensitivity()\f1.
.SS "Miscellaneous"
.IP "\f4String the_pattern() const;\f1"
Returns the current pattern.
.IP "\f4sensitivity the_sensitivity() const;\f1"
.SQ
.IP "\f4void set_sensitivity(sensitivity s);\f1"
Gets and sets, respectively, the case sensitivity of this Regex.
.SS "Regex constants"
.IP "\f4static Regex Int, Float, Double,\f1"
.IC "\f4    Alpha, Alphanum, Identifier;\f1"
The following patterns:
.nf
\f4^(\e+|-)?[0-9]+$\f1,
\f4^(\e+|-)?((\e.[0-9]+)|([0-9]+(\e.[0-9]*)?))$\f1,
\f4^(\e+|-)?((\e.[0-9]+)|([0-9]+(\e.[0-9]*)?))\f1
\f4    ([eE](\e+|-)?[0-9]+)?$\f1,
\f4^[A-Za-z]+$\f1,
\f4^[0-9A-Za-z]+$\f1, and
\f4^[A-Za-z_][A-Za-z0-9_]*$\f1.
.sp
.SH "Subex"
.SS "Constructors, destructor"
.IP "\f4Subex();\f1"
Constructs a Subex, in preparation to being used as a parameter
of \f3Regex::match\f1 or \f3Regexiter::next\f1.
.SS "Subexpression information"
.IP "\f4Substrinfo operator()(unsigned int i) const;\f1"
.SQ
.IP "\f4Substrinfo operator()(unsigned int i,\f1"
.IC "\f4    String &the_substr) const;\f1"
Picks out the 
substring in \f4the_target()\f1 which matched the \f4i\f1'th 
subexpression in the pattern.
If the pattern had an \f4i\f1'th subexpression,
and the \f4i\f1'th subexpression matched something in \f4the_target()\f1,
then assigns the matching substring to \f4the_substr\f1 (if supplied) and the return
value tests true;
otherwise the return value tests false and the arguments are not affected.

If this Subex has not been used as an argument
of \f3Regex::match\f1 or \f3Regexiter::next\f1,
then the return value tests false and the arguments are not affected.
.SS "Miscellaneous"
.IP "\f4const char *the_target() const;\f1"
Returns the target which was matched against by the 
most recent call to \f4Regex::match()\f1 or \f4Regexiter::next()\f1 
to which this Subex was supplied as an argument.
If there is no such call, returns 0.
.sp
.SH "Regexiter"
Iterating a Regex over a given target picks out, in sequence,
.I all
the matching substrings in the target, beginning with the leftmost and continuing to the right.
.SS "Enumerations"
.IP "\f4enum style { overlapping, nonoverlapping };\f1"
Used to specify whether iteration is to be overlapping or nonoverlapping.
Under overlapping iteration, 
the matching substring of second and later 
iterations is allowed 
to overlap a proper suffix of the matching substring of
the previous iteration.  Under
nonoverlapping iteration, all matching substrings are disjoint.
.SS "Constructors"
.IP "\f4Regexiter(const Regex &r, const char *target,\f1"
.IC "\f4    style s = nonoverlapping);\f1"
Constructs an iterator for \f4r\f1 over the given \f4target\f1.
The iterator internally stores a reference to \f4r\f1, and hence 
it is a program error to delete or move \f4r\f1 while this iterator is extant.
.SS "Iterating"
.IP "\f4Substrinfo next();\f1"
.SQ
.IP "\f4Substrinfo next(Subex &subex);\f1"
.SQ
.IP "\f4Substrinfo next(String &the_substr);\f1"
.SQ
.IP "\f4Substrinfo next(Subex &subex, String &the_substr);\f1"
Picks out the next matching substring in the target.
Arguments and return value are as in \f4Regex::match()\f1.
.SS "Miscellaneous"
.IP "\f4const char *the_target();\f1"
Returns the value of \f4target\f1 which was supplied to this Regexiter's
constructor.
.IP "\f4const Regex &the_regex();\f1"
Returns a constant reference to the Regex which was supplied
to this Regexiter's constructor.
.IP "\f4style the_style();\f1"
Returns the style.
.SH BUGS
There ought to be conversions between Regex's and
\f3Fsm\f1's (see \f3Fsm(3C++)\f1).
.SH SEE ALSO
\f3String(3C++)\f1.
.br
One of \f3re(3)\f1, \f3regcmp(3)\f1, \f3regex(3)\f1, \f3regexp(3)\f1.
